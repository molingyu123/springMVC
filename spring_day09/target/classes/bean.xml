<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd">
    <!--配置spring ioc-->
    <bean id="accountService" class="com.lingyun.AccountServiceImpl"></bean>

    <!--xml aop spring-->
    <!--
      1.把通知的bean 交给spring
      2.使用aop:config 标签表明开始aop配置
      3.使用aop:aspect 标签配置切面
          id：属性是给切面提供一个唯一标识
          ref属性是指定通知类的bean 的id
      4.在aop:aspect标签的内部使用对应标签来配置通知的类型
          我们现在示例是让printLog 方法在切入点执行前，所以是前置通知
          aop:before 标签表示配置前置通知
              method 属性用于指定logger 类中哪个方法示前置通知
              pointcut属性用于指定切入点表达式，该表达式的含义指的示对业务层中那些方法增强

          切入点表达式的写法：
              关键字 execution(表达式)
              表达式:
                访问修饰符，  返回值 包名。包名。。类名 方法名(参数列表)
              标准表达式写法
                public void com.lingyun.AccountServiceImpl.saveAccount()
               访问修饰符可以省略的
               返回值可以使用通配符表示任意返回值
               包名可以使用通配符，表示任意包，但是有几包就写几个*
               包名使用.. 表示当前包
               类名和方法名都可以使用*来实现通配
               参数列表
                  可以直接写数据类型
                      基本类型直接写名称 int
                      引用类型写包名.类名的方式， java.lang.String
                  可以使用通配符表示任意类，但是必须有参数
                  可以使用.. 表示有无参数均可，有参数可以是任意类型
              全通配写法：
                * *。。*。*（..）

              实际开发中切入点的表达式的通常写法
                   切到业务层实现类下的所有方法

    -->
    <!--通知的bean-->
    <bean id="logger" class="com.ling.util.Logger"></bean>

    <!--配置aop-->
    <aop:config>
        <!--配置切面-->
        <aop:aspect id="logAdvice" ref="logger">
            <!--配置通知的类型，并且建立通知方法和切入点的方法的关联-->
            <!--这个是单一的方法-->
            <aop:before method="printLog" pointcut="execution(* *.*.AccountServiceImpl.saveAccount())"/>
            <!--所有的方法-->
            <!--<aop:before method="printLog" pointcut="execution(* *..*.*(..))"/>-->
        </aop:aspect>
    </aop:config>


</beans>
